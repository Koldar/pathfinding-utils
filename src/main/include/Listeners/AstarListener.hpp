#ifndef PATHFINDINGUTILS_ASTARLISTENER_HEADER__
#define PATHFINDINGUTILS_ASTARLISTENER_HEADER__

#include <cpp-utils/ICleanable.hpp>

namespace pathfinding::search::listeners {

    using namespace cpp_utils;

    /**
     * @brief Allows you to further refines the behavior of an A* algorithm
     * 
     */
    template <typename STATE>
    class AstarListener: public ICleanable {
    public:
        /**
         * @brief called whenever a new node is expanded from the open list
         * 
         * @param iteration search algorithm iteration when the changes has happended. Iterations start from 0
         * @param node the node expanded
         */
        virtual void onNodeExpanded(int iteration, const STATE& node) = 0;
        /**
         * @brief called whenever a new node is generated from the search. 
         * 
         * Nodes generated by the supplier or from some other sources won't be count.
         * 
         * @param iteration search algorithm iteration when the changes has happended. Iterations start from 0
         * @param node 
         */
        virtual void onNodeGenerated(int iteration, const STATE& node) = 0;

        /**
         * @brief called each time we start computing the heuristic value of a state
         * 
         * @param iteration search algorithm iteration when the changes has happended. Iterations start from 0
         * @param s 
         */
        virtual void onStartingComputingHeuristic(int iteration, const STATE& s) = 0;

        /**
         * @brief called each time we stop computing the heuristic value of a state
         * 
         * @param iteration search algorithm iteration when the changes has happended. Iterations start from 0
         * @param s 
         */
        virtual void onEndingComputingHeuristic(int iteration, const STATE& s) = 0;
        
        /**
         * @brief called whenever a new goal is found
         * 
         * @param iteration search algorithm iteration when the changes has happended. Iterations start from 0
         * @param goal the goal we have reached
         */
        virtual void onSolutionFound(int iteration, const STATE& goal) = 0;
    };

}

#endif